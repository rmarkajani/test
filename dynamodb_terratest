package test

import (
	"context"
	"testing"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/appconfig"
	"github.com/cobank-acb/cpe-terratest-helpers/src/helpers"
	"github.com/gruntwork-io/terratest/modules/terraform"
	"github.com/stretchr/testify/assert"
)

var (
	cfg *aws.Config
)

const (
	// aws
	awsAccountId        = "546345899106"
	awsRegion           = "us-west-2"
	assumePolicyName    = "inline-policy"
	assumePrincipalName = "terra-factory-github-actions"

	// AppConfig variables
	appName          = "test-app"
	environmentName  = "test-env"
	profileName      = "test-profile"
	profileType      = "AWS.AppConfig.FeatureFlags"
	validatorType    = "JSON_SCHEMA"
	validatorContent = `{
        "$schema": "http://json-schema.org/draft-07/schema#",
        "type": "object",
        "properties": {
            "exampleKey": {
                "type": "string"
            }
        },
        "required": ["exampleKey"]
    }`
)

var ctx = context.Background()

func createAppConfigVars(kmsKeyArn, iamRoleId string) map[string]interface{} {
	return map[string]interface{}{
		"app_name":     appName,
		"environments": environmentName,
		"profile_name": profileName,
		"profile_type": profileType,
		"validators": map[string]interface{}{
			"validator1": map[string]interface{}{
				"type":    validatorType,
				"content": validatorContent,
			},
		},
		"deployment_strategy": "AppConfig.AllAtOnce",
		"deployment_duration": 15,
		"final_bake_time":     5,
		"growth_factor":       50,
		"replicate_to":        "NONE",
		"hosted_configuration_content": map[string]interface{}{
			"exampleKey": "exampleValue",
		},
		"kms_master_key_id": kmsKeyArn,
		"iam_role_id":       iamRoleId,
	}
}

// Initialize defaults for testing
func init() {
	// Get the AWS Config
	awsConfig, err := helpers.GetAwsConfig(awsRegion)
	if err != nil {
		panic(err)
	}

	cfg = awsConfig
}

func TestAppConfigResources(t *testing.T) {
	t.Parallel()

	kmsKeyArn, err := helpers.CreateKmsKey(*cfg, awsAccountId)
	if err != nil {
		t.Fatal(err)
	}

	t.Logf("successfully created test kms key: %s", *kmsKeyArn)

	defer helpers.DeleteKmsKey(t, *cfg, *kmsKeyArn)

	role, err := helpers.CreateIamRole(*cfg)
	if err != nil {
		t.Fatal(err)
	}

	t.Logf("successfully created test iam role: %s", *role)
	defer helpers.DeleteIamRole(t, *cfg, *role)
	t.Logf("successfully created test assume appconfig client")

	terraformOptions := &terraform.Options{
		TerraformDir: "../",
		Vars:         createAppConfigVars(*kmsKeyArn, *role),
	}

	defer terraform.Destroy(t, terraformOptions)

	terraform.InitAndApply(t, terraformOptions)

	appID := terraform.Output(t, terraformOptions, "appconfig_application_id")
	assert.NotEmpty(t, appID)

	envID := terraform.Output(t, terraformOptions, "appconfig_environment_id")
	assert.NotEmpty(t, envID)

	profileID := terraform.Output(t, terraformOptions, "appconfig_configuration_profile_id")
	assert.NotEmpty(t, profileID)

	svc := appconfig.NewFromConfig(*cfg)
	profile, err := svc.GetConfigurationProfile(ctx, &appconfig.GetConfigurationProfileInput{
		ApplicationId:          aws.String(appID),
		ConfigurationProfileId: aws.String(profileID),
	})
	assert.NoError(t, err)
	assert.NotNil(t, profile)

	validators := profile.Validators
	assert.NoError(t, err)
	assert.Len(t, validators, 1)
	assert.Equal(t, "JSON_SCHEMA", validators[0].Type)

	// Verify the AppConfig deployment strategy
	deploymentStrategyID := terraform.Output(t, terraformOptions, "appconfig_deployment_strategy_id")
	assert.NotEmpty(t, deploymentStrategyID)

	// Verify the AppConfig deployment
	deploymentID := terraform.Output(t, terraformOptions, "appconfig_deployment_id")
	assert.NotEmpty(t, deploymentID)

	// Verify the AppConfig hosted configuration version
	hostedConfigVersionID := terraform.Output(t, terraformOptions, "appconfig_hosted_configuration_version_id")
	assert.NotEmpty(t, hostedConfigVersionID)
}
